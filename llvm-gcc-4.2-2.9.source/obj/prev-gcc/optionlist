-helpCommonDisplay this information
-output-pch=C ObjC C++ ObjC++ Joined Separate
-paramCommon Separate--param <param>=<value>	Set parameter <param> to value.  See below for a complete list of parameters
-target-helpCommon
-versionCommon
AC ObjC C++ ObjC++ Joined Separate-A<question>=<answer>	Assert the <answer> to <question>.  Putting '-' before <question> disables the <answer> to <question>
CC ObjC C++ ObjC++Do not discard comments
CCC ObjC C++ ObjC++Do not discard comments in macro expansions
DC ObjC C++ ObjC++ Joined Separate-D<macro>[=<val>]	Define a <macro> with <val> as its value.  If just <macro> is given, <val> is taken to be 1
EC ObjC C++ ObjC++ Undocumented
FC ObjC C++ ObjC++ Joined Separate-F <dir>	Add <dir> to the end of the main framework include path
GCommon Joined Separate UInteger-G<number>	Put global and static data smaller than <number> bytes into a special section (on some targets)
HC ObjC C++ ObjC++Print the name of header files as they are used
IAda Joined Separate
IC ObjC C++ ObjC++ Joined Separate-I <dir>	Add <dir> to the end of the main include path
IFortran Joined-I<directory>	Add a directory for INCLUDE and MODULE searching
IJava Joined
JFortran Joined-J<directory>	Put MODULE files in 'directory'
LanguageAda
LanguageC
LanguageC++
LanguageFortran
LanguageJava
LanguageObjC
LanguageObjC++
LanguageTreelang
MC ObjC C++ ObjC++Generate make dependencies
MJava
MDC ObjC C++ ObjC++ SeparateGenerate make dependencies and compile
MD_Java Undocumented
MFC ObjC C++ ObjC++ Joined Separate-MF <file>	Write dependency output to the given file
MFJava Separate
MGC ObjC C++ ObjC++Treat missing header files as generated files
MMC ObjC C++ ObjC++Like -M but ignore system header files
MMJava
MMDC ObjC C++ ObjC++ SeparateLike -MD but ignore system header files
MMD_Java Undocumented
MPC ObjC C++ ObjC++Generate phony targets for all headers
MPJava
MQC ObjC C++ ObjC++ Joined Separate-MQ <target>	Add a MAKE-quoted target
MTC ObjC C++ ObjC++ Joined Separate-MT <target>	Add an unquoted target
MTJava Separate
OCommon JoinedOrMissing-O<number>	Set optimization level to <number>
OsCommonOptimize for space rather than speed
PC ObjC C++ ObjC++Do not generate #line directives
UC ObjC C++ ObjC++ Joined Separate-U<macro>	Undefine <macro>
WCommon RejectNegativeThis switch is deprecated; use -Wextra instead
W#warningsC ObjC C++ ObjC++Enable #warning
WabiC++ ObjC++ Var(warn_abi)Warn about things that will change when compiling with an ABI-compliant compiler
WaddressC ObjC C++ ObjC++ Var(warn_address)Warn about suspicious uses of memory addresses
Waggregate-returnCommon Var(warn_aggregate_return)Warn about returning structures, unions or arrays
WaliasingFortranWarn about possible aliasing of dummy arguments
WallAda
WallC ObjC C++ ObjC++Enable most warning messages
WallFortran
WallJava
WampersandFortranWarn about missing ampersand in continued character constants
Wassign-interceptObjC ObjC++ Var(warn_assign_intercept)Warn whenever an Objective-C assignment is being intercepted by the garbage collector
WattributesCommon Var(warn_attributes) Init(1)Warn about inappropriate attribute usage
Wbad-function-castC ObjC Var(warn_bad_function_cast)Warn about casting functions to incompatible types
Wc++-compatC ObjC Var(warn_cxx_compat)Warn about C constructs that are not in the common subset of C and C++
Wcast-alignCommon Var(warn_cast_align)Warn about pointer casts which increase alignment
Wcast-qualC ObjC C++ ObjC++ Var(warn_cast_qual)Warn about casts which discard qualifiers
Wchar-subscriptsC ObjC C++ ObjC++ Var(warn_char_subscripts)Warn about subscripts whose type is \"char\"
Wcharacter-truncationFortranWarn about truncated character expressions
WcommentC ObjC C++ ObjC++Warn about possibly nested block comments, and C++ comments spanning more than one physical line
WcommentsC ObjC C++ ObjC++Synonym for -Wcomment
WconversionC ObjC C++ ObjC++ Var(warn_conversion)Warn about possibly confusing type conversions
WconversionFortranWarn about implicit conversion
Wctor-dtor-privacyC++ ObjC++ Var(warn_ctor_dtor_privacy)Warn when all constructors and destructors are private
Wdeclaration-after-statementC ObjC Var(warn_declaration_after_statement)Warn when a declaration is found after a statement
WdeprecatedC++ ObjC++ Var(warn_deprecated) Init(1)Warn about deprecated compiler features
WdeprecatedJava Var(warn_deprecated) VarExistsWarn if a deprecated compiler feature, class, method, or field is used
Wdeprecated-declarationsCommon Var(warn_deprecated_decl) Init(1)Warn about uses of __attribute__((deprecated)) declarations
Wdirect-ivar-accessObjC ObjC++ Var(warn_direct_ivar_access)Warn about direct access to gc-enabled ivars
Wdisabled-optimizationCommon Var(warn_disabled_optimization)Warn when an optimization pass is disabled
Wdiscard-qualC ObjC Var(warn_discard_qual) Init(1)Warn about discarded qualifiers
Wdiv-by-zeroC ObjC C++ ObjC++ Var(warn_div_by_zero) Init(1)Warn about compile-time integer division by zero
Weffc++C++ ObjC++ Var(warn_ecpp)Warn about violations of Effective C++ style rules
Wempty-bodyC ObjC C++ ObjC++ Var(warn_empty_body) Init(-1) WarningWarn about an empty body in an if or else statement
Wendif-labelsC ObjC C++ ObjC++Warn about stray tokens after #elif and #endif
WerrorC ObjC C++ ObjC++
WerrorCommon Var(warnings_are_errors)Treat all warnings as errors
Werror-implicit-function-declarationC ObjC RejectNegativeMake implicit function declarations an error
Werror=Common JoinedTreat specified warning as error
WextraCommonPrint extra (possibly unwanted) warnings
Wextra-tokensC ObjC C++ ObjC++Warn about extra tokens at the end of prepreprocessor directives
Wextraneous-semicolonJava Var(flag_extraneous_semicolon)Warn if deprecated empty statements are found
Wfatal-errorsCommon Var(flag_fatal_errors)Exit on the first error occurred
Wfloat-equalC ObjC C++ ObjC++ Var(warn_float_equal)Warn if testing floating point numbers for equality
WformatC ObjC C++ ObjC++Warn about printf/scanf/strftime/strfmon format string anomalies
Wformat-extra-argsC ObjC C++ ObjC++ Var(warn_format_extra_args)Warn if passing too many arguments to a function for its format string
Wformat-nonliteralC ObjC C++ ObjC++ Var(warn_format_nonliteral)Warn about format strings that are not literals
Wformat-securityC ObjC C++ ObjC++Warn about possible security problems with format functions
Wformat-y2kC ObjC C++ ObjC++ Var(warn_format_y2k)Warn about strftime formats yielding 2-digit years
Wformat-zero-lengthC ObjC C++ ObjC++ Var(warn_format_zero_length)Warn about zero-length formats
Wformat=C ObjC C++ ObjC++ Joined
Wfour-char-constantsC ObjC C++ ObjC++Warn about multicharacter constants containing exactly four characters
Wglobal-constructorsC ObjC C++ ObjC++ Var(warn_global_constructors)Warn when global (namespace scope) objects require runtimeconstruction or destruction or when functions that use attributeconstructor or destructor are used.  This is useful to help maintainfast program startup and end times.
WimplicitC ObjC C++ ObjC++
Wimplicit-function-declarationC ObjC Var(mesg_implicit_function_declaration) Init(-1)Warn about implicit function declarations
Wimplicit-intC ObjC Var(warn_implicit_int)Warn when a declaration does not specify a type
Wimplicit-interfaceFortranWarn about calls with implicit interface
WimportC ObjC C++ ObjC++Deprecated.  This switch has no effect
Winit-selfC ObjC C++ ObjC++ Var(warn_init_self)Warn about variables which are initialized to themselves
WinlineCommon Var(warn_inline)Warn when an inlined function cannot be inlined
Wint-to-pointer-castC ObjC Var(warn_int_to_pointer_cast) Init(1)Warn when there is a cast to a pointer from an integer of a different size
Winvalid-offsetofC++ ObjC++ Var(warn_invalid_offsetof) Init(1)Warn about invalid uses of the \"offsetof\" macro
Winvalid-pchC ObjC C++ ObjC++Warn about PCH files that are found but not used
Wlarger-than-Common RejectNegative Joined UInteger-Wlarger-than-<number>	Warn if an object is larger than <number> bytes
Wline-truncationFortranWarn about truncated source lines
Wlong-longAda
Wlong-longC ObjC C++ ObjC++ Var(warn_long_long) Init(1)Do not warn about using \"long long\" when -pedantic
WmainC ObjCWarn about suspicious declarations of \"main\"
Wmissing-bracesC ObjC C++ ObjC++ Var(warn_missing_braces)Warn about possibly missing braces around initializers
Wmissing-declarationsC ObjC Var(warn_missing_declarations)Warn about global functions without previous declarations
Wmissing-field-initializersC ObjC C++ ObjC++ Var(warn_missing_field_initializers) Init(-1)Warn about missing fields in struct initializers
Wmissing-format-attributeAda
Wmissing-format-attributeC ObjC C++ ObjC++ Var(warn_missing_format_attribute)Warn about functions which might be candidates for format attributes
Wmissing-include-dirsC ObjC C++ ObjC++Warn about user-specified include directories that do not exist
Wmissing-noreturnCommon Var(warn_missing_noreturn)Warn about functions which might be candidates for __attribute__((noreturn))
Wmissing-prototypesAda
Wmissing-prototypesC ObjC C++ ObjC++ Var(warn_missing_prototypes)Warn about global functions without prototypes
WmostC ObjC C++ ObjC++ Like -Wall but without -Wparentheses
WmulticharC ObjC C++ ObjC++Warn about use of multi-character character constants
Wnested-externsC ObjC Var(warn_nested_externs)Warn about \"extern\" declarations not at file scope
Wnewline-eofC ObjC C++ ObjC++Warn about files missing a newline at the end of the file
Wnon-lvalue-assignC ObjC C++ ObjC++ Var(warn_non_lvalue_assign) Init(1)Warn about assignment to casts and conditional expressions of lvalues
Wnon-template-friendC++ ObjC++ Var(warn_nontemplate_friend) Init(1)Warn when non-templatized friend functions are declared within a template
Wnon-virtual-dtorC++ ObjC++ Var(warn_nonvdtor)Warn about non-virtual destructors
WnonnullC ObjC C++ ObjC++ Var(warn_nonnull)Warn about NULL being passed to argument slots marked as requiring non-NULL
Wnonstd-intrinsicsFortranWarn about usage of non-standard intrinsics
Wnormalized=C ObjC C++ ObjC++ Joined-Wnormalized=<id|nfc|nfkc>	Warn about non-normalised Unicode strings
Wobjc2Common Report Var(flag_objc2_check)
Wold-style-castC++ ObjC++ Var(warn_old_style_cast)Warn if a C-style cast is used in a program
Wold-style-definitionAda
Wold-style-definitionC ObjC Var(warn_old_style_definition)Warn if an old-style parameter definition is used
Wout-of-dateJava Var(flag_newer) Init(1)Warn if .class files are out of date
WoverflowCommon Var(warn_overflow) Init(1)Warn about overflow in arithmetic expressions
Woverlength-stringsC ObjC C++ ObjC++ Var(warn_overlength_strings) Init(-1)Warn if a string is longer than the maximum portable length specified by the standard
Woverloaded-virtualC++ ObjC++ Var(warn_overloaded_virtual)Warn about overloaded virtual function names
Woverride-initC ObjC Var(warn_override_init) Init(-1)Warn about overriding initializers without side effects
WpackedCommon Var(warn_packed)Warn when the packed attribute has no effect on struct layout
WpaddedCommon Var(warn_padded)Warn when padding is required to align structure members
WparenthesesC ObjC C++ ObjC++ Var(warn_parentheses)Warn about possibly missing parentheses
Wpmf-conversionsC++ ObjC++ Var(warn_pmf2ptr) Init(1)Warn when converting the type of pointers to member functions
Wpointer-arithC ObjC C++ ObjC++ Var(warn_pointer_arith)Warn about function pointer arithmetic
Wpointer-signC ObjC Var(warn_pointer_sign) Init(-1)Warn when a pointer differs in signedness in an assignment
Wpointer-to-int-castC ObjC Var(warn_pointer_to_int_cast) Init(1)Warn when a pointer is cast to an integer of a different size
WpragmasC ObjC C++ ObjC++ Var(warn_pragmas) Init(1)Warn about misuses of pragmas
Wproperty-assign-defaultObjC ObjC++ Var(warn_property_assign_default) Init(1)Warn if no attribute specified on property of pointer to object type (defaulted to assign)
WprotocolObjC ObjC++ Var(warn_protocol) Init(1)Warn if inherited methods are unimplemented
Wredundant-declsC ObjC C++ ObjC++ Var(warn_redundant_decls)Warn about multiple declarations of the same object
Wredundant-modifiersJava Var(flag_redundant)Warn if modifiers are specified when not necessary
WreorderC++ ObjC++ Var(warn_reorder)Warn when the compiler reorders code
Wreturn-typeC ObjC C++ ObjC++ Var(warn_return_type)Warn whenever a function's return type defaults to \"int\" (C), or about inconsistent return types (C++)
WselectorObjC ObjC++ Var(warn_selector)Warn if a selector has multiple methods
Wsequence-pointC ObjC C++ ObjC++ Var(warn_sequence_point)Warn about possible violations of sequence point rules
WshadowCommon Var(warn_shadow)Warn when one local variable shadows another
Wshorten-64-to-32C ObjC C++ ObjC++ Var(warn_shorten_64_to_32)Warn if a value is implicitly converted from a 64 bit type to a 32 bit type
Wsign-compareC ObjC C++ ObjC++ Var(warn_sign_compare) Init(-1)Warn about signed-unsigned comparisons
Wsign-promoC++ ObjC++ Var(warn_sign_promo)Warn when overload promotes from unsigned to signed
Wstack-protectorCommon Var(warn_stack_protect)Warn when not issuing stack smashing protection for some reason
Wstrict-aliasingCommonWarn about code which might break strict aliasing rules
Wstrict-aliasing=Common Joined UIntegerWarn about code which might break strict aliasing rules
Wstrict-null-sentinelC++ ObjC++Warn about uncasted NULL used as sentinel
Wstrict-overflowCommonWarn about optimizations that assume that signed overflow is undefined
Wstrict-overflow=Common Joined UIntegerWarn about optimizations that assume that signed overflow is undefined
Wstrict-prototypesAda
Wstrict-prototypesC ObjC Var(warn_strict_prototypes)Warn about unprototyped function declarations
Wstrict-selector-matchObjC ObjC++ Var(warn_strict_selector_match)Warn if type signatures of candidate methods do not match exactly
WsurprisingFortranWarn about \"suspicious\" constructs
WswitchCommon Var(warn_switch)Warn about enumerated switches, with no default, missing a case
Wswitch-defaultCommon Var(warn_switch_default)Warn about enumerated switches missing a \"default:\" statement
Wswitch-enumCommon Var(warn_switch_enum)Warn about all enumerated switches missing a specific case
WsynthC++ ObjC++ Var(warn_synth)Warn when synthesis behavior differs from Cfront
Wsystem-headersC ObjC C++ ObjC++Do not suppress warnings from system headers
Wsystem-headersCommon Var(warn_system_headers)Do not suppress warnings from system headers
WtabsFortranPermit nonconforming uses of the tab character
WtraditionalC ObjC Var(warn_traditional)Warn about features not present in traditional C
WtrigraphsC ObjC C++ ObjC++Warn if trigraphs are encountered that might affect the meaning of the program
Wundeclared-selectorObjC ObjC++ Var(warn_undeclared_selector)Warn about @selector()s without previously declared methods
WundefC ObjC C++ ObjC++Warn if an undefined macro is used in an #if directive
WunderflowFortranWarn about underflow of numerical constant expressions
WuninitializedCommon Var(warn_uninitialized)Warn about uninitialized automatic variables
Wunknown-pragmasC ObjC C++ ObjC++Warn about unrecognized pragmas
Wunreachable-codeCommon Var(warn_notreached)Warn about code that will never be executed
Wunsafe-loop-optimizationsCommon Var(warn_unsafe_loop_optimizations)Warn if the loop cannot be optimized due to nontrivial assumptions.
WunusedCommonEnable all -Wunused- warnings
Wunused-functionCommon Var(warn_unused_function)Warn when a function is unused
Wunused-labelCommon Var(warn_unused_label)Warn when a label is unused
Wunused-macrosC ObjC C++ ObjC++Warn about macros defined in the main file that are not used
Wunused-parameterCommon Var(warn_unused_parameter)Warn when a function parameter is unused
Wunused-valueCommon Var(warn_unused_value)Warn when an expression value is unused
Wunused-variableCommon Var(warn_unused_variable)Warn when a variable is unused
Wvariadic-macrosAda
Wvariadic-macrosC ObjC C++ ObjC++Do not warn about using variadic macros when -pedantic
Wvolatile-register-varCommon Var(warn_register_var)Warn when a register variable is declared volatile
Wwrite-stringsAda
Wwrite-stringsC ObjC C++ ObjC++ Var(warn_write_strings)In C++, nonzero means warn about deprecated conversion from string literals to `char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.
ansiC ObjC C++ ObjC++A synonym for -std=c89 (for C) or -std=c++98 (for C++)
aux-infoCommon Separate-aux-info <file>	Emit declaration information into <file>
aux-info=Common Joined
auxbaseCommon Separate
auxbase-stripCommon Separate
dC ObjC C++ ObjC++ Joined
dCommon Joined-d<letters>	Enable dumps from specific passes of the compiler
dumpbaseCommon Separate-dumpbase <file>	Set the file basename to be used for dumps
emit-llvmCommon Report Var(emit_llvm)Emit LLVM code to the .s file instead of native machine code.
emit-llvm-bcCommon Report Var(emit_llvm_bc)Emit LLVM IR to the output file instead of native machine code.
fCLASSPATH=Java JoinedOrMissing RejectNegative--CLASSPATH	Deprecated; use --classpath instead
fPICCommon Report Var(flag_pic,2)Generate position-independent code if possible (large mode)
fPIECommon Report Var(flag_pie,2)Generate position-independent code for executables if possible (large mode)
fRTS=Ada Joined RejectNegative
fabi-version=Common Joined UInteger Var(flag_abi_version) Init(2)
faccess-controlC++ ObjC++Enforce class member access control semantics
falign-functionsCommon Report Var(align_functions,0)Align the start of functions
falign-functions=Common RejectNegative Joined UInteger Var(align_functions) VarExists
falign-jumpsCommon Report Var(align_jumps,0) VarUint PerFuncAlign labels which are only reached by jumping
falign-jumps-max-skipCommon Report Var(align_jumps_max_skip,0) VarUint PerFunc
falign-jumps-max-skip=Common RejectNegative Joined UInteger Var(align_jumps_max_skip) PerFunc VarUint VarExists
falign-jumps=Common RejectNegative Joined UInteger Var(align_jumps) VarExists VarUint PerFunc
falign-labelsCommon Report Var(align_labels,0) VarUint PerFuncAlign all labels
falign-labels=Common RejectNegative Joined UInteger Var(align_labels) VarExists PerFunc VarUint
falign-loopsCommon Report Var(align_loops) VarUint PerFuncAlign the start of loops
falign-loops-max-skipCommon Report Var(align_loops_max_skip,0) VarUint PerFunc
falign-loops-max-skip=Common RejectNegative Joined UInteger Var(align_loops_max_skip) VarExists PerFunc VarUint
falign-loops=Common RejectNegative Joined UInteger Var(align_loops) VarExists PerFunc VarUint
fall-intrinsicsFortran RejectNegativeAll intrinsics procedures are available regardless of selected standard
fall-virtualC++ ObjC++
falt-external-templatesC++ ObjC++Change when template instances are emitted
faltivecC ObjC C++ ObjC++ Var(flag_faltivec)Enable Altivec
fapple-kextTarget Report C++ Var(flag_apple_kext)Generate code for darwin loadable kernel extentions
fapple-kextTarget Report Var(flag_apple_kext)Generate code for darwin loadable kernel extentions
fargument-aliasCommon Report Var(flag_argument_noalias,0)Specify that arguments may alias each other and globals
fargument-noaliasCommon Report Var(flag_argument_noalias,1) VarExistsAssume arguments may alias globals but not each other
fargument-noalias-anythingCommon Report Var(flag_argument_noalias,3) VarExistsAssume arguments alias no other storage
fargument-noalias-globalCommon Report Var(flag_argument_noalias,2) VarExistsAssume arguments alias neither each other nor globals
fasmC ObjC C++ ObjC++Recognize the \"asm\" keyword
fasm-blocksC ObjC C++ ObjC++Handle CW-style assembly blocks
fassertJava Var(flag_assert) Init(1)Permit the use of the assert keyword
fassume-compiledJava
fassume-compiled=Java JoinedOrMissing
fastC ObjC C++ ObjC++Used for c or c++ optimization
fastcpC++ ObjC++Used when C++ specific optimization is needed
fastfC ObjCUsed when c is generated from NAG fortran
fasynchronous-unwind-tablesCommon Report Var(flag_asynchronous_unwind_tables)Generate unwind tables that are exact at each instruction boundary
fautomaticFortranDo not treat local variables and COMMON blocks as if they were named in SAVE statements
fbackslashFortranSpecify that backslash in string introduces an escape character
fblocksC ObjC C++ ObjC++ Var(flag_blocks) Init(-1)Program supports c/objc extension blocks
fbootclasspath=Java JoinedOrMissing RejectNegative--bootclasspath=<path>	Replace system path
fbootstrap-classesJava Var(flag_bootstrap_classes)Generated should be loaded by bootstrap loader
fbounds-checkCommon Report Var(flag_bounds_check)Generate code to check bounds before indexing arrays
fbranch-count-regCommon Report Var(flag_branch_on_count_reg) Init(1) PerFuncReplace add, compare, branch with branch on count register
fbranch-probabilitiesCommon Report Var(flag_branch_probabilities)Use profiling information for branch probabilities
fbranch-target-load-optimizeCommon Report Var(flag_branch_target_load_optimize) PerFuncPerform branch target load optimization before prologue / epilogue threading
fbranch-target-load-optimize2Common Report Var(flag_branch_target_load_optimize2) PerFuncPerform branch target load optimization after prologue / epilogue threading
fbtr-bb-exclusiveCommon Report Var(flag_btr_bb_exclusive) PerFuncRestrict target load migration not to re-use registers in any basic block
fbuiltinC ObjC C++ ObjC++Recognize built-in functions
fbuiltin-C ObjC C++ ObjC++ Joined
fcall-saved-Common Joined RejectNegative-fcall-saved-<register>	Mark <register> as being preserved across functions
fcall-used-Common Joined RejectNegative-fcall-used-<register>	Mark <register> as being corrupted by function calls
fcaller-savesCommon Report Var(flag_caller_saves) PerFuncSave registers around function calls
fcheck-newC++ ObjC++Check the return value of new
fcheck-referencesJava Var(flag_check_references)Generate checks for references to NULL
fclasspath=Java JoinedOrMissing RejectNegative--classpath=<path>	Set class path
fclone-structorsC++ ObjC++ Var(flag_clone_structors)Factor out certain duplicate code in constructors and destructors
fcommonCommon Report Var(flag_no_common,0)Do not put uninitialized globals in the common section
fcompile-resource=Java Joined RejectNegative
fcond-mismatchC ObjC C++ ObjC++Allow the arguments of the '?' operator to have different types
fconserve-spaceC++ ObjC++Reduce the size of object files
fconstant-string-class=ObjC ObjC++ Joined-fconst-string-class=<name>	Use class <name> for constant strings
fconvert=big-endianFortran RejectNegativeUse big-endian format for unformatted files
fconvert=little-endianFortran RejectNegativeUse little-endian format for unformatted files
fconvert=nativeFortran RejectNegativeUse native format for unformatted files
fconvert=swapFortran RejectNegativeSwap endianness for unformatted files
fcprop-registersCommon Report Var(flag_cprop_registers) PerFuncPerform a register copy-propagation optimization pass
fcray-pointerFortranUse the Cray Pointer extension
fcreate-profileCommonEnable common options for generating profile info for profile feedback directed optimizations
fcrossjumpingCommon Report Var(flag_crossjumping) PerFuncPerform cross-jumping optimization
fcse-follow-jumpsCommon Report Var(flag_cse_follow_jumps) PerFuncWhen running CSE, follow jumps to their targets
fcse-skip-blocksCommon Report Var(flag_cse_skip_blocks) PerFuncWhen running CSE, follow conditional jumps
fcx-limited-rangeCommon Report Var(flag_cx_limited_range) PerFuncOmit range reduction step when performing complex division
fd-lines-as-codeFortran RejectNegativeIgnore 'D' in column one in fixed form
fd-lines-as-commentsFortran RejectNegativeTreat lines with 'D' in column one as comments
fdata-sectionsCommon Report Var(flag_data_sections)Place data items into their own section
fdebug-disable-debug-info-printCommon Report Var(flag_disable_debug_info_print)Disable debug info printing into .s file
fdebug-llvm-module-optCommon Report Var(flag_debug_llvm_module_opt)Help debug llvm module-level optimizer
fdebug-pass-argumentsCommon Report Var(flag_debug_pass_arguments)Print pass manager arguments
fdebug-pass-structureCommon Report Var(flag_debug_pass_structure)Print pass manager structure
fdefault-double-8FortranSet the default double precision kind to an 8 byte wide type
fdefault-inlineC++ ObjC++Inline member functions by default
fdefault-integer-8FortranSet the default integer kind to an 8 byte wide type
fdefault-real-8FortranSet the default real kind to an 8 byte wide type
fdefer-popCommon Report Var(flag_defer_pop) PerFuncDefer popping functions args from stack until later
fdelayed-branchCommon Report Var(flag_delayed_branch) PerFuncAttempt to fill delay slots of branch instructions
fdelete-null-pointer-checksCommon Report Var(flag_delete_null_pointer_checks) PerFuncDelete useless null pointer checks
fdiagnostics-show-location=Common Joined RejectNegative-fdiagnostics-show-location=[once|every-line]	How often to emit source location at the beginning of line-wrapped diagnostics
fdiagnostics-show-optionCommonAmend appropriate diagnostic messages with the command line option that controls them
fdisable-assertionsJava
fdisable-assertions=Java JoinedOrMissing
fdisable-typechecking-for-specC C++Make crossfile type mismatches warnings not errors (for SPEC)
fdollar-okFortranAllow dollar signs in entity names
fdollars-in-identifiersC ObjC C++ ObjC++Permit '$' as an identifier character
fdump-Common Joined RejectNegative-fdump-<type>	Dump various compiler internals to a file
fdump-noaddrCommon Report Var(flag_dump_noaddr)Suppress output of addresses in debugging dumps
fdump-parse-treeFortranDisplay the code tree after parsing
fdump-unnumberedCommon Report Var(flag_dump_unnumbered) VarExistsSuppress output of instruction numbers, line number notes and addresses in debugging dumps
fearly-inliningCommon Report Var(flag_early_inlining) Init(1)Perform early inlining
felide-constructorsC++ ObjC++
feliminate-dwarf2-dupsCommon Report Var(flag_eliminate_dwarf2_dups)Perform DWARF2 duplicate elimination
feliminate-unused-debug-symbolsCommon Report Var(flag_debug_only_used_symbols)Perform unused type elimination in debug info
feliminate-unused-debug-typesCommon Report Var(flag_eliminate_unused_debug_types) Init(1)Perform unused type elimination in debug info
femit-class-debug-alwaysCommon Report Var(flag_emit_class_debug_always) Init(1)Do not suppress C++ class debug information.
femit-class-fileJava Var(flag_emit_class_files)Output a class file
femit-class-filesJava Var(flag_emit_class_files)Alias for -femit-class-file
fenable-assertionsJava
fenable-assertions=Java JoinedOrMissing
fencoding=Java Joined RejectNegative--encoding=<encoding>	Choose input encoding (defaults from your locale)
fenforce-eh-specsC++ ObjC++Generate code to check exception specifications
fenum-int-equivC++ ObjC++
fexceptionsCommon Report Var(flag_exceptions)Enable exception handling
fexec-charset=C ObjC C++ ObjC++ Joined RejectNegative-fexec-charset=<cset>	Convert all strings and character constants to character set <cset>
fexpensive-optimizationsCommon Report Var(flag_expensive_optimizations) PerFuncPerform a number of minor, expensive optimizations
fextdirs=Java Joined RejectNegative--extdirs=<path>	Set the extension directory path
fextended-identifiersC ObjC C++ ObjC++Permit universal character names (\\u and \\U) in identifiers
fexternal-templatesC++ ObjC++
ff2cFortranUse f2c calling convention
ffast-mathCommon
ffilelist-fileJava Var(flag_filelist_file)Input file is a file with a list of filenames to compile
ffinite-math-onlyCommon Report Var(flag_finite_math_only) PerFuncAssume no NaNs or infinities are generated
ffixed-Common Joined RejectNegative-ffixed-<register>	Mark <register> as being unavailable to the compiler
ffixed-formFortran RejectNegativeAssume that the source file is fixed form
ffixed-line-length-Fortran RejectNegative Joined UInteger-ffixed-line-length-<n>		Use n as character line width in fixed mode
ffixed-line-length-noneFortran RejectNegativeAllow arbitrary character line width in fixed mode
ffloat-storeCommon Report Var(flag_float_store) PerFuncDon't allocate floats and doubles in extended-precision registers
ffor-scopeC++ ObjC++Scope of for-init-statement variables is local to the loop
fforce-addrCommon Report Var(flag_force_addr) PerFuncCopy memory address constants into registers before use
fforce-classes-archive-checkJava Var(flag_force_classes_archive_check)Always check for non gcj generated classes archives
fforce-memCommon Report Var(flag_force_mem) PerFuncCopy memory operands into registers before use
ffpe-trap=Fortran RejectNegative JoinedOrMissing-ffpe-trap=[..]	Stop on following floating point exceptions
ffree-formFortran RejectNegativeAssume that the source file is free form
ffree-line-length-Fortran RejectNegative Joined UInteger-ffree-line-length-<n>		Use n as character line width in free mode
ffree-line-length-noneFortran RejectNegativeAllow arbitrary character line width in free mode
ffreestandingC ObjCDo not assume that standard C libraries and \"main\" exist
ffriend-injectionC++ ObjC++ Var(flag_friend_injection)Inject friend functions into enclosing namespace
ffunction-cseCommon Report Var(flag_no_function_cse,0) PerFuncAllow function addresses to be held in registers
ffunction-sectionsCommon Report Var(flag_function_sections)Place each function into its own section
fgcseCommon Report Var(flag_gcse) PerFuncPerform global common subexpression elimination
fgcse-after-reloadCommon Report Var(flag_gcse_after_reload) PerFuncPerform global common subexpression elimination after register allocationhas finished
fgcse-lasCommon Report Var(flag_gcse_las) Init(0) PerFuncPerform redundant load after store elimination in global common subexpressionelimination
fgcse-lmCommon Report Var(flag_gcse_lm) Init(1) PerFuncPerform enhanced load motion during global common subexpression elimination
fgcse-smCommon Report Var(flag_gcse_sm) Init(0) PerFuncPerform store motion after global common subexpression elimination
fglobal-alloc-prefer-bytesCommon Report Var(flag_global_alloc_prefer_bytes) Init(1) PerFuncPrefer to allocate byte and short candidates before word candidates (x86_32 only)
fgnu-keywordsC++ ObjC++Recognize GNU-defined keywords
fgnu-runtimeObjC ObjC++Generate code for GNU runtime environment
fgnu89-inlineC ObjC Var(flag_gnu89_inline) Init(-1)Use traditional GNU semantics for inline functions
fguess-branch-probabilityCommon Report Var(flag_guess_branch_prob) PerFuncEnable guessing of branch probabilities
fguiding-declsC++ ObjC++
fhandle-exceptionsC++ ObjC++
fhash-synchronizationJava Var(flag_hash_synchronization)Assume the runtime uses a hash table to map an object to its synchronization structure
fhonor-infinitesCommon Report Var(flag_honor_infinites) Init(1) PerFuncAssume no infinites are generated
fhonor-nansCommon Report Var(flag_honor_nans) Init(1) PerFuncAssume no NaNs are generated
fhonor-stdC++ ObjC++
fhostedC ObjCAssume normal C execution environment
fhuge-objectsC++ ObjC++Enable support for huge objects
fidentCommon Report Var(flag_no_ident,0)Process #ident directives
fif-conversionCommon Report Var(flag_if_conversion) PerFuncPerform conversion of conditional jumps to branchless equivalents
fif-conversion2Common Report Var(flag_if_conversion2) PerFuncPerform conversion of conditional jumps to conditional execution
fimplement-inlinesC++ ObjC++Export functions even if they can be inlined
fimplicit-inline-templatesC++ ObjC++Emit implicit instantiations of inline templates
fimplicit-noneFortranSpecify that no implicit typing is allowed, unless overridden by explicit IMPLICIT statements
fimplicit-templatesC++ ObjC++Emit implicit instantiations of templates
findirect-classesJava Var(flag_indirect_classes) Init(1)Generate instances of Class at runtime
findirect-dispatchJava Var(flag_indirect_dispatch)Use offset tables for virtual method calls
finhibit-size-directiveCommon Report Var(flag_inhibit_size_directive)Do not generate .size directives
finlineCommon Report Var(flag_no_inline,0) Init(2)Pay attention to the \"inline\" keyword
finline-functionsCommon Report Var(flag_inline_functions)Integrate simple functions into their callers
finline-functionsJava
finline-functions-called-onceCommon Report Var(flag_inline_functions_called_once) Init(1)Integrate functions called once into their callers
finline-limit-Common RejectNegative Joined UInteger
finline-limit=Common RejectNegative Joined UInteger-finline-limit=<number>	Limit the size of inlined functions to <number>
finput-charset=C ObjC C++ ObjC++ Joined RejectNegative-finput-charset=<cset>	Specify the default character set for source files
finstrument-functionsCommon Report Var(flag_instrument_function_entry_exit)Instrument function entry and exit with profiling calls
fipa-cpCommon Report Var(flag_ipa_cp)Perform Interprocedural constant propagation
fipa-ptaCommon Report Var(flag_ipa_pta) Init(0)Perform interprocedural points-to analysis
fipa-pure-constCommon Report Var(flag_ipa_pure_const) Init(0)Discover pure and const functions
fipa-referenceCommon Report Var(flag_ipa_reference) Init(0)Discover readonly and non addressable static variables
fipa-type-escapeCommon Report Var(flag_ipa_type_escape) Init(0)Type based escape and alias analysis
fivoptsCommon Report Var(flag_ivopts) Init(1) PerFuncOptimize induction variables on trees
fjniJava Var(flag_jni)Assume native functions are implemented using JNI
fjump-tablesCommon Var(flag_jump_tables) Init(1)Use jump tables for sufficiently large switch statements
fkeep-inline-functionsCommon Report Var(flag_keep_inline_functions)Generate code for functions even if they are fully inlined
fkeep-static-constsCommon Report Var(flag_keep_static_consts) Init(1)Emit static const variables even if they are not used
flabels-okC++ ObjC++
flax-vector-conversionsC ObjC C++ ObjC++Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.
fleading-underscoreCommon Report Var(flag_leading_underscore) Init(-1)Give external symbols a leading underscore
flexer-traceTreelangTrace lexical analysis
flimit-debug-infoCommon Report Var(flag_limit_debug_info)Limit debug info for certain type 
flimited-precision=Common RejectNegative Joined UInteger Var(flag_limited_precision) Init(0)Calculate the approximate value of logf, log2f, log10f, expf, exp2f, and powf(10,x) to the given bit precision.
flocal-allocCommon Report Var(flag_local_alloc) Init(1) PerFuncRun the local register allocator
floop-optimizeCommonDoes nothing.  Preserved for backward compatibility.
fltoCommon Report Var(emit_llvm)Enable link time optimizaton.
fmath-errnoCommon Report Var(flag_errno_math) Init(1) PerFuncSet errno after built-in math functions
fmax-errors=Fortran RejectNegative Joined UInteger-fmax-errors=<n>	Maximum number of errors to report
fmax-identifier-length=Fortran RejectNegative Joined UInteger-fmax-identifier-length=<n>	Maximum identifier length
fmax-stack-var-size=Fortran RejectNegative Joined UInteger-fmax-stack-var-size=<n>	Size in bytes of the largest array that will be put on the stack
fmax-subrecord-length=Fortran RejectNegative Joined UInteger-fmax-subrecord-length=<n>	Maximum length for subrecords
fmem-reportCommon Report Var(mem_report)Report on permanent memory allocation
fmerge-all-constantsCommon Report Var(flag_merge_constants,2) Init(1)Attempt to merge identical constants and constant variables
fmerge-constantsCommon Report Var(flag_merge_constants,1) VarExistsAttempt to merge identical constants across compilation units
fmessage-length=Common RejectNegative Joined UInteger-fmessage-length=<number>	Limit diagnostics to <number> characters per line.  0 suppresses line-wrapping
fmodulo-schedCommon Report Var(flag_modulo_sched) PerFuncPerform SMS based modulo scheduling before the first scheduling pass
fmove-loop-invariantsCommon Report Var(flag_move_loop_invariants) Init(1) PerFunc VarUintMove loop invariant computations out of loops
fms-asmsC ObjC C++ ObjC++ Var(flag_ms_asms)When handling assembly blocks, use MW-style assembly blocks
fms-extensionsC ObjC C++ ObjC++Don't warn about uses of Microsoft extensions
fmudflapCommon RejectNegative Report Var(flag_mudflap)Add mudflap bounds-checking instrumentation for single-threaded program
fmudflapirCommon RejectNegative Report Var(flag_mudflap_ignore_reads)Ignore read operations when inserting mudflap instrumentation
fmudflapthCommon RejectNegative Report VarExists Var(flag_mudflap,2)Add mudflap bounds-checking instrumentation for multi-threaded program
fname-mangling-version-C++ ObjC++ Joined
fnested-functionsC ObjC Var(flag_nested_functions)Allow nested functions.
fnew-abiC++ ObjC++
fnew-property-ivar-synthesisObjC ObjC++ Var(flag_new_property_ivar_synthesis) Init(1)Enable new style of fragile-ivar synthesis for properties
fnext-runtimeObjC ObjC++Generate code for NeXT (Apple Mac OS X) runtime environment
fnil-receiversObjC ObjC++Assume that receivers of Objective-C messages may be nil
fno-backendFortran RejectNegativeDon't generate code, just do syntax and semantics checking
fnon-call-exceptionsCommon Report Var(flag_non_call_exceptions)Support synchronous non-call exceptions
fnon-lvalue-assignC ObjC C++ ObjC++ Var(flag_non_lvalue_assign) Init(1)Allow assignment to casts and conditional expressions of lvalues
fnonansi-builtinsC++ ObjC++
fnonnull-objectsC++ ObjC++
fobey-inlineCommon Report Var(flag_obey_inline) VarExistsObey 'inline' keyword and always inline, regardless of size
fobjc-abi-version=Common Joined UInteger Var(flag_objc_abi) Init(-1)
fobjc-atdefsObjC ObjC++ Var(flag_objc_atdefs) Init(-1)Allow use of @defs
fobjc-call-cxx-cdtorsObjC++ Var(flag_objc_call_cxx_cdtors) Init(-1)Generate special Objective-C methods to initialize/destroy non-POD C++ ivars, if needed
fobjc-direct-dispatchObjC ObjC++ Var(flag_objc_direct_dispatch) Init(-1)Allow fast jumps to the message dispatcher
fobjc-exceptionsObjC ObjC++ Var(flag_objc_exceptions)Enable Objective-C exception and synchronization syntax
fobjc-gcObjC ObjC++ Var(flag_objc_gc)Enable garbage collection (GC) in Objective-C/Objective-C++ programs
fobjc-gc-onlyObjC ObjC++ Var(flag_objc_gc_only)  Init(0)Program only supprts (GC) in ObjC/ObjC++ programs
fobjc-legacy-dispatchObjC ObjC++ Var(flag_objc_legacy_dispatch) Init(-1)Use Objective-C v1 message dispatching
fobjc-new-propertyC C++ ObjC ObjC++ Var(flag_objc_new_property) Init(1)Enable Objective-C new property syntax and semantics
fobjc-nilcheckCommon Report Var(flag_objc_nilcheck,1)
fobjc-sjlj-exceptionsObjC ObjC++ Var(flag_objc_sjlj_exceptions) Init(-1)Enable Objective-C setjmp exception handling runtime
fobjc-zerocost-exceptionsObjC ObjC++ Var(flag_objc_zerocost_exceptions) Init(0)Enable Objective-C zero-cost exception
fomit-frame-pointerCommon Report Var(flag_omit_frame_pointer) PerFunc VarUintWhen possible do not generate stack frames
fone-definition-ruleCommon Report Var(flag_odr)Assume all definitions of a multiply defined global are equivalent
fopenmpC ObjC C++ ObjC++ Var(flag_openmp)Enable OpenMP
fopenmpFortranEnable OpenMP
foperator-namesC++ ObjC++Recognize C++ kewords like \"compl\" and \"xor\"
fopt-diaryCommon Report Var(flag_opt_diary)Enable optimization diary
foptimize-register-moveCommon Report Var(flag_regmove) PerFuncDo the full register move optimization pass
foptimize-sibling-callsCommon Report Var(flag_optimize_sibling_calls) PerFuncOptimize sibling and tail recursive calls
foptimize-static-class-initializationJava Var(flag_optimize_sci)Enable optimization of static class initialization code
foptional-diagsC++ ObjC++Enable optional diagnostics
foutput-class-dir=Java Joined RejectNegative
fpack-derivedFortranTry to layout derived types as compact as possible
fpack-structCommon Report Var(flag_pack_struct)Pack structure members together without holes
fpack-struct=Common RejectNegative Joined UInteger-fpack-struct=<number>	Set initial maximum structure member alignment
fparser-traceTreelangTrace the parsing process
fpcc-struct-returnCommon Report Var(flag_pcc_struct_return,1) VarExistsReturn small aggregates in memory, not registers
fpch-depsC ObjC C++ ObjC++
fpch-preprocessC ObjC C++ ObjC++Look for and use PCH files even when preprocessing
fpeel-loopsCommon Report Var(flag_peel_loops) PerFuncPerform loop peeling
fpeepholeCommon Report Var(flag_no_peephole,0) PerFuncEnable machine specific peephole optimizations
fpeephole2Common Report Var(flag_peephole2) PerFuncEnable an RTL peephole pass before sched2
fpermissiveC++ ObjC++Downgrade conformance errors to warnings
fpicCommon Report Var(flag_pic,1) VarExistsGenerate position-independent code if possible (small mode)
fpieCommon Report Var(flag_pie,1) VarExistsGenerate position-independent code for executables if possible (small mode)
fpredictive-compilationCommonPredictive Compilation
fpredictive-compilation=Common RejectNegative Joined UInteger
fprefetch-loop-arraysCommon Report Var(flag_prefetch_loop_arrays) PerFuncGenerate prefetch instructions, if available, for arrays in loops
fpreprocessedC ObjC C++ ObjC++Treat the input file as already preprocessed
fpreprocessedFortranTreat the input file as preprocessed
fprofileCommon Report Var(profile_flag)Enable basic program profiling code
fprofile-arcsCommon Report Var(profile_arc_flag)Insert arc-based program profiling code
fprofile-generateCommonEnable common options for generating profile info for profile feedback directed optimizations
fprofile-useCommonEnable common options for performing profile feedback directed optimizations
fprofile-valuesCommon Report Var(flag_profile_values)Insert code to profile values of expressions
frandom-seedCommon
frandom-seed=Common Joined RejectNegative-frandom-seed=<string>	Make compile reproducible using <string>
frange-checkFortranEnable range checking during compilation
frecord-marker=4Fortran RejectNegativeUse a 4-byte record marker for unformatted files
frecord-marker=8Fortran RejectNegativeUse an 8-byte record marker for unformatted files
freduced-reflectionJava Var(flag_reduced_reflection)Reduce the amount of reflection meta-data generated
freg-struct-returnCommon Report Var(flag_pcc_struct_return,0) VarExistsReturn small aggregates in registers
fregmoveCommon Report Var(flag_regmove) PerFunc VarExistsEnables a register move optimization
frename-registersCommon Report Var(flag_rename_registers) Init(2) PerFunc VarUintPerform a register renaming optimization pass
freorder-blocksCommon Report Var(flag_reorder_blocks) PerFuncReorder basic blocks to improve code placement
freorder-blocks-and-partitionCommon Report Var(flag_reorder_blocks_and_partition) PerFuncReorder basic blocks and partition into hot and cold sections
freorder-functionsCommon Report Var(flag_reorder_functions)Reorder functions to improve code placement
frepack-arraysFortranCopy array sections into a contiguous block on procedure entry
freplace-objc-classesObjC ObjC++Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime
frepoC++ ObjC++Enable automatic template instantiation
frerun-cse-after-loopCommon Report Var(flag_rerun_cse_after_loop) Init(2) PerFunc VarUintAdd a common subexpression elimination pass after loop optimizations
frerun-loop-optCommonDoes nothing.  Preserved for backward compatibility.
freschedule-modulo-scheduled-loopsCommon Report Var(flag_resched_modulo_sched) PerFuncEnable/Disable the traditional scheduling in loops that already passed modulo scheduling
frounding-mathCommon Report Var(flag_rounding_math) PerFuncDisable optimizations that assume default FP rounding behavior
frtl-abstract-sequencesCommon Report Var(flag_rtl_seqabstr)Perform sequence abstraction optimization on RTL
frttiC++ ObjC++Generate run time type descriptor information
fsave-repository=C ObjC C++ ObjC++ Joined Separate
fsched-interblockCommon Report Var(flag_schedule_interblock) Init(1) PerFuncEnable scheduling across basic blocks
fsched-specCommon Report Var(flag_schedule_speculative) Init(1) PerFuncAllow speculative motion of non-loads
fsched-spec-loadCommon Report Var(flag_schedule_speculative_load) PerFuncAllow speculative motion of some loads
fsched-spec-load-dangerousCommon Report Var(flag_schedule_speculative_load_dangerous) PerFuncAllow speculative motion of more loads
fsched-stalled-insnsCommon Report Var(flag_sched_stalled_insns)Allow premature scheduling of queued insns
fsched-stalled-insns-depCommon Report Var(flag_sched_stalled_insns_dep,1) Init(1) PerFunc VarUintSet dependence distance checking in premature scheduling of queued insns
fsched-stalled-insns-dep=Common RejectNegative Joined UInteger Var(flag_sched_stalled_insns_dep) VarExists VarUint PerFunc-fsched-stalled-insns-dep=<number>	Set dependence distance checking in premature scheduling of queued insns
fsched-stalled-insns=Common RejectNegative Joined UInteger-fsched-stalled-insns=<number>	Set number of queued insns that can be prematurely scheduled
fsched-verbose=Common RejectNegative Joined Var(sched_verbose_param) UInteger PerFunc VarUint-fsched-verbose=<number>	Set the verbosity level of the scheduler
fsched2-use-superblocksCommon Report Var(flag_sched2_use_superblocks) PerFuncIf scheduling post reload, do superblock scheduling
fsched2-use-tracesCommon Report Var(flag_sched2_use_traces) PerFuncIf scheduling post reload, do trace scheduling
fschedule-insnsCommon Report Var(flag_schedule_insns) PerFuncReschedule instructions before register allocation
fschedule-insns2Common Report Var(flag_schedule_insns_after_reload) PerFuncReschedule instructions after register allocation
fsecond-underscoreFortranAppend a second underscore if the name already contains an underscore
fsection-anchorsCommon Report Var(flag_section_anchors)Access data in the same section from shared anchor points
fseeCommon Report Var(flag_see) Init(0)Eliminate redundant sign extensions using LCM.
fshort-doubleC ObjC C++ ObjC++Use the same size for double as for float
fshort-enumsC ObjC C++ ObjC++Use the narrowest integer type possible for enumeration types
fshort-enumsFortranUse the narrowest integer type possible for enumeration types
fshort-wcharC ObjC C++ ObjC++Force the underlying type for \"wchar_t\" to be \"unsigned short\"
fshow-columnCommon C ObjC C++ ObjC++ Report Var(flag_show_column) Init(1)Show column numbers in diagnostics, when available.  Default on
fsignaling-nansCommon Report Var(flag_signaling_nans) PerFuncDisable optimizations observable by IEEE signaling NaNs
fsigned-bitfieldsC ObjC C++ ObjC++When \"signed\" or \"unsigned\" is not given make the bitfield signed
fsigned-charC ObjC C++ ObjC++Make \"char\" signed by default
fsingle-precision-constantCommon Report Var(flag_single_precision_constant)Convert floating point constants to single precision constants
fsplit-ivs-in-unrollerCommon Report Var(flag_split_ivs_in_unroller) Init(1) PerFuncSplit lifetimes of induction variables when loops are unrolled
fsquangleC++ ObjC++
fstack-checkCommon Report Var(flag_stack_check)Insert stack checking code into the program
fstack-limitCommon
fstack-limit-register=Common RejectNegative Joined-fstack-limit-register=<register>	Trap if the stack goes past <register>
fstack-limit-symbol=Common RejectNegative Joined-fstack-limit-symbol=<name>	Trap if the stack goes past symbol <name>
fstack-protectorCommon Report Var(flag_stack_protect, 1) Init(-1)Use propolice as a stack protection method
fstack-protector-allCommon Report RejectNegative Var(flag_stack_protect, 2) VarExistsUse a stack protection method for every function
fstatsC++ ObjC++Display statistics accumulated during compilation
fstore-checkJava Var(flag_store_check) Init(1)Enable assignability checks for stores into object arrays
fstrength-reduceCommonDoes nothing.  Preserved for backward compatibility.
fstrict-aliasingCommon Report Var(flag_strict_aliasing)Assume strict aliasing rules apply
fstrict-overflowCommon Report Var(flag_strict_overflow)Treat signed overflow as undefined
fstrict-prototypeC++ ObjC++
fsyntax-onlyCommon Report Var(flag_syntax_only)Check for syntax errors, then stop
ftabstop=C ObjC C++ ObjC++ Joined RejectNegative UInteger-ftabstop=<number>	Distance between tab stops for column reporting
ftemplate-depth-C++ ObjC++ Joined RejectNegative UInteger-ftemplate-depth-<number>	Specify maximum template instantiation depth
ftest-coverageCommon Report Var(flag_test_coverage)Create data files needed by \"gcov\"
fthis-is-variableC++ ObjC++
fthread-jumpsCommon Report Var(flag_thread_jumps) PerFuncPerform jump threading optimizations
fthreadsafe-staticsC++ ObjC++-fno-threadsafe-statics	Do not generate thread-safe code for initializing local statics
ftime-reportCommon Report Var(time_report)Report the time taken by each compiler pass
ftls-model=Common Joined RejectNegative-ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]	Set the default thread-local storage code generation model
ftoplevel-reorderCommon Report Var(flag_toplevel_reorder) Init(1)Reorder top level functions, variables, and asms
ftracerCommon Report Var(flag_tracer) PerFuncPerform superblock formation via tail duplication
ftrapping-mathCommon Report Var(flag_trapping_math) Init(1) PerFuncAssume floating-point operations can trap
ftrapvCommon Report Var(flag_trapv) PerFuncTrap for signed overflow in addition, subtraction and multiplication
ftree-ccpCommon Report Var(flag_tree_ccp) PerFuncEnable SSA-CCP optimization on trees
ftree-chCommon Report Var(flag_tree_ch) PerFuncEnable loop header copying on trees
ftree-combine-tempsCommon Report Var(flag_tree_combine_temps) PerFuncCoalesce memory temporaries in the SSA->normal pass
ftree-copy-propCommon Report Var(flag_tree_copy_prop)Enable copy propagation on trees
ftree-copyrenameCommon Report Var(flag_tree_copyrename) PerFuncReplace SSA temporaries with better names in copies
ftree-dceCommon Report Var(flag_tree_dce) PerFuncEnable SSA dead code elimination optimization on trees
ftree-dominator-optsCommon Report Var(flag_tree_dom) PerFuncEnable dominator optimizations
ftree-dseCommon Report Var(flag_tree_dse) PerFuncEnable dead store elimination
ftree-freCommon Report Var(flag_tree_fre) PerFuncEnable Full Redundancy Elimination (FRE) on trees
ftree-loop-imCommon Report Var(flag_tree_loop_im) Init(1) PerFuncEnable loop invariant motion on trees
ftree-loop-ivcanonCommon Report Var(flag_tree_loop_ivcanon) Init(1) PerFuncCreate canonical induction variables in loops
ftree-loop-linearCommon Report Var(flag_tree_loop_linear) PerFuncEnable linear loop transforms on trees
ftree-loop-memsetCommon Report Var(flag_tree_loop_memset) Init(0) PerFuncTransform appropriate loops to memset calls
ftree-loop-optimizeCommon Report Var(flag_tree_loop_optimize) Init(1) PerFuncEnable loop optimizations on tree level
ftree-lrsCommon Report Var(flag_tree_live_range_split) PerFuncPerform live range splitting during the SSA->normal pass
ftree-preCommon Report Var(flag_tree_pre) PerFuncEnable SSA-PRE optimization on trees
ftree-saliasCommon Report Var(flag_tree_salias)Perform structural alias analysis
ftree-sinkCommon Report Var(flag_tree_sink)Enable SSA code sinking on trees
ftree-sraCommon Report Var(flag_tree_sra) PerFuncPerform scalar replacement of aggregates
ftree-store-ccpCommon Report Var(flag_tree_store_ccp)Enable SSA-CCP optimization for stores and loads
ftree-store-copy-propCommon Report Var(flag_tree_store_copy_prop)Enable copy propagation for stores and loads
ftree-terCommon Report Var(flag_tree_ter) PerFuncReplace temporary expressions in the SSA->normal pass
ftree-vect-loop-versionCommon Report Var(flag_tree_vect_loop_version) Init(1)Enable loop versioning when doing loop vectorization on trees
ftree-vectorizeCommon Report Var(flag_tree_vectorize) PerFuncEnable loop vectorization on trees
ftree-vectorizer-verbose=Common RejectNegative Joined-ftree-vectorizer-verbose=<number>	Set the verbosity level of the vectorizer
ftree-vrpAda
ftree-vrpCommon Report Var(flag_tree_vrp) Init(0)Perform Value Range Propagation on trees
funderscoringFortranAppend underscores to externally visible names
funit-at-a-timeCommon Report Var(flag_unit_at_a_time)Compile whole compilation unit at a time
funroll-all-loopsCommon Report Var(flag_unroll_all_loops) PerFuncPerform loop unrolling for all loops
funroll-loopsCommon Report Var(flag_unroll_loops) PerFuncPerform loop unrolling when iteration count is known
funsafe-loop-optimizationsCommon Report Var(flag_unsafe_loop_optimizations)Allow loop optimizations to assume that the loops behave in normal way
funsafe-math-optimizationsCommon Report Var(flag_unsafe_math_optimizations) PerFuncAllow math optimizations that may violate IEEE or ISO standards
funsigned-bitfieldsC ObjC C++ ObjC++When \"signed\" or \"unsigned\" is not given make the bitfield unsigned
funsigned-charC ObjC C++ ObjC++Make \"char\" unsigned by default
funswitch-loopsCommon Report Var(flag_unswitch_loops) PerFuncPerform loop unswitching
funwind-tablesCommon Report Var(flag_unwind_tables)Just generate unwind tables for exception handling
fuse-boehm-gcJava Var(flag_use_boehm_gc)Generate code for the Boehm GC
fuse-cxa-atexitC++ ObjC++Use __cxa_atexit to register destructors
fuse-cxa-get-exception-ptrC++ ObjC++Use __cxa_get_exception_ptr in exception handling
fuse-divide-subroutineJava Var(flag_use_divide_subroutine) Init(1)Call a library routine to do integer divisions
fuse-profileCommonEnable common options for performing profile feedback directed optimizations
fvar-trackingCommon Report Var(flag_var_tracking) VarExistsPerform variable tracking
fvariable-expansion-in-unrollerCommon Report Var(flag_variable_expansion_in_unroller) PerFuncApply variable expansion when loops are unrolled
fverbose-asmCommon Report Var(flag_verbose_asm)Add extra commentary to assembler output
fvisibility-inlines-hiddenC++ ObjC++Marks all inlined methods as having hidden visibility
fvisibility-ms-compatC++ ObjC++ Var(flag_visibility_ms_compat)Changes visibility to match Microsoft Visual Studio by default
fvisibility=Common Joined RejectNegative-fvisibility=[default|internal|hidden|protected]	Set the default symbol visibility
fvptCommon Report Var(flag_value_profile_transformations)Use expression value profiles in optimizations
fvtable-gcC++ ObjC++Discard unused virtual functions
fvtable-thunksC++ ObjC++Implement vtables using thunks
fweakC++ ObjC++Emit common-like symbols as weak symbols
fwebCommon Report Var(flag_web) Init(2) PerFunc VarUintConstruct webs and split unrelated uses of single variable
fwhole-programCommon Report Var(flag_whole_program) Init(0)Perform whole program optimizations
fwide-exec-charset=C ObjC C++ ObjC++ Joined RejectNegative-fwide-exec-charset=<cset>	Convert all wide strings and character constants to character set <cset>
fworking-directoryC ObjC C++ ObjC++Generate a #line directive pointing at the current working directory
fwrapvCommon Report Var(flag_wrapv) PerFuncAssume signed arithmetic overflow wraps around
fwritable-stringsCommon Report Var(flag_writable_strings) VarExistsStore strings in writable data section
fxrefC++ ObjC++Emit cross referencing information
fzero-initialized-in-bssCommon Report Var(flag_zero_initialized_in_bss) Init(1)Put zero initialized data in the bss section
fzero-linkObjC ObjC++Generate lazy class lookup (via objc_getClass()) for use in Zero-Link mode
gCommon JoinedOrMissingGenerate debug information in default format
gantAda Joined Undocumented
gcoffCommon JoinedOrMissing Negative(gdwarf-2)Generate debug information in COFF format
gdwarf-2Common JoinedOrMissing Negative(gstabs)Generate debug information in DWARF v2 format
gen-declsObjC ObjC++Dump declarations to a .decl file
ggdbCommon JoinedOrMissingGenerate debug information in default extended format
gnatAda Joined-gnat<options>	Specify options to GNAT
gnatOAda Separate
gstabsCommon JoinedOrMissing Negative(gstabs+)Generate debug information in STABS format
gstabs+Common JoinedOrMissing Negative(gvms)Generate debug information in extended STABS format
gvmsCommon JoinedOrMissing Negative(gxcoff)Generate debug information in VMS format
gxcoffCommon JoinedOrMissing Negative(gxcoff+)Generate debug information in XCOFF format
gxcoff+Common JoinedOrMissing Negative(gcoff)Generate debug information in extended XCOFF format
idirafterC ObjC C++ ObjC++ Joined Separate-idirafter <dir>	Add <dir> to the end of the system include path
iframeworkTarget RejectNegative C ObjC C++ ObjC++ Joined Separate -iframework <dir>	Add <dir> to the end of the system framework include path
imacrosC ObjC C++ ObjC++ Joined Separate-imacros <file>	Accept definition of macros in <file>
imultilibC ObjC C++ ObjC++ Joined Separate-imultilib <dir> Set <dir> to be the multilib include subdirectory
includeC ObjC C++ ObjC++ Joined Separate-include <file>	Include the contents of <file> before other files
iprefixC ObjC C++ ObjC++ Joined Separate-iprefix <path>	Specify <path> as a prefix for next two options
iquoteC ObjC C++ ObjC++ Joined Separate-iquote <dir>	Add <dir> to the end of the quote include path
isysrootC ObjC C++ ObjC++ Joined Separate-isysroot <dir>	Set <dir> to be the system root directory
isystemC ObjC C++ ObjC++ Joined Separate-isystem <dir>	Add <dir> to the start of the system include path
iwithprefixC ObjC C++ ObjC++ Joined Separate-iwithprefix <dir>	Add <dir> to the end of the system include path
iwithprefixbeforeC ObjC C++ ObjC++ Joined Separate-iwithprefixbefore <dir>	Add <dir> to the end of the main include path
iwithsysrootC ObjC C++ ObjC++ Joined Separate-iwithsysroot <dir> Add <sysroot>/<dir> to the start of the system include path
lang-asmC Undocumented
lang-fortranC Undocumented
lang-objcC ObjC C++ ObjC++ Undocumented
m32Target RejectNegative InverseMask(64BIT)Generate 32-bit code
m64Target RejectNegative Mask(64BIT)Generate 64-bit code
mabi=Target RejectNegative Joined-mabi=	Specify ABI to use
maix-struct-returnTarget Report RejectNegative Var(aix_struct_return)Return all structures in memory (AIX default)
malign-Target RejectNegative JoinedSpecify alignment of structure fields default/natural
maltivecTarget Report Mask(ALTIVEC)Use AltiVec instructions
matt-stubsTarget Report Var(darwin_macho_att_stub) Init(1)Generate AT&T-style stubs for Mach-O
mconstant-cfstringsTarget Report Var(darwin_constant_cfstrings) Init(-1)Generate compile-time CFString objects
mcpu=Target RejectNegative Joined-mcpu=	Use features of and schedule code for given CPU
mdarwin-rtl-pre-ignore-critical-edgesTarget Report Var(flag_darwin_rtl_pre_ignore_critical_edges)
mdebug=Target RejectNegative Joined-mdebug=	Enable debug output
mdlmzbTarget Report Mask(DLMZB)Use 4xx string-search dlmzb instruction
mdynamic-no-picTarget Report Mask(MACHO_DYNAMIC_NO_PIC)Generate code suitable for executables (NOT shared libs)
mfix-and-continueTarget Report Var(darwin_fix_and_continue)Generate code suitable for fast turn around debugging
mfloat-gprs=Target RejectNegative Joined-mfloat-gprs=	Select GPR floating point method
mfp-in-tocTarget Report RejectNegative Var(TARGET_NO_FP_IN_TOC,0)Place floating point constants in TOC
mfprndTarget Report Mask(FPRND)Use PowerPC V2.02 floating point rounding instructions
mfull-tocTarget ReportPut everything in the regular TOC
mfused-maddTarget Report RejectNegative InverseMask(NO_FUSED_MADD, FUSED_MADD)Generate fused multiply/add instructions
mhard-floatTarget Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)Use hardware floating point
minsert-sched-nops=Target RejectNegative JoinedSpecify which post scheduling nop insertion scheme to apply
miphoneos-version-min=Target Joined Report Var(darwin_iphoneos_version_min) Init(NULL)The earliest iPhone OS version on which this program will run
miselTarget Var(rs6000_isel)Generate isel instructions
misel=Target RejectNegative Joined-misel=yes/no	Deprecated option.  Use -misel/-mno-isel instead
mkernelTarget Report Var(flag_mkernel)Generate code for the kernel or loadable kernel extentions
mkernelTarget Report Var(flag_mkernel)Generate code for the kernel or loadable kernel extentions
mllvmCommon Separate ReportSpecify options directly to the LLVM backend
mlong-branchTarget Report Var(rs6000_default_long_calls)Deprecated option.  Use -mlongcall instead
mlong-double-Target RejectNegative Joined UInteger-mlong-double-<n>	Specify size of long double (64 or 128 bits)
mlongcallTarget Report Var(rs6000_default_long_calls)Avoid all range limits on call instructions
mmacosx-version-min=Target Joined Report Var(darwin_macosx_version_min) Init(NULL)The earliest MacOS X version on which this program will run
mmask-pim-altivecTarget Undocumented Mask(PIM_ALTIVEC)
mmfcrfTarget Report Mask(MFCRF)Use PowerPC V2.01 single field mfcr instruction
mminimal-tocTarget Report Mask(MINIMAL_TOC)Use only one TOC entry per procedure
mmulhwTarget Report Mask(MULHW)Use 4xx half-word multiply instructions
mmultipleTarget Report Mask(MULTIPLE)Generate load/store multiple instructions
mnew-mnemonicsTarget Report RejectNegative Mask(NEW_MNEMONICS)Use new mnemonics for PowerPC architecture
mno-fp-in-tocTarget Report RejectNegative Var(TARGET_NO_FP_IN_TOC)Do not place floating point constants in TOC
mno-fused-maddTarget Report RejectNegative Mask(NO_FUSED_MADD)Do not generate fused multiply/add instructions
mno-powerTarget Report RejectNegativeDo not use POWER instruction set
mno-powerpcTarget Report RejectNegativeDo not use PowerPC instruction set
mno-sum-in-tocTarget RejectNegative Var(TARGET_NO_SUM_IN_TOC)Do not place symbol+offset constants in TOC
mno-updateTarget Report RejectNegative Mask(NO_UPDATE)Do not generate load/store with update instructions
mold-mnemonicsTarget Report RejectNegative InverseMask(NEW_MNEMONICS)Use old mnemonics for PowerPC architecture
mone-byte-boolTarget RejectNegative Report Var(darwin_one_byte_bool)Set sizeof(bool) to 1
mpascal-stringsTarget Report Var(darwin_pascal_strings)Allow use of Pascal strings
mpim-altivecTarget Report Var(rs6000_altivec_pim)Enable use of Motorola AltiVec PIM operations and predicates
mpopcntbTarget Report Mask(POPCNTB)Use PowerPC V2.02 popcntb instruction
mpowerTarget Report RejectNegative Mask(POWER)Use POWER instruction set
mpower2Target Report Mask(POWER2)Use POWER2 instruction set
mpowerpcTarget Report RejectNegative Mask(POWERPC)Use PowerPC instruction set
mpowerpc-gfxoptTarget Report Mask(PPC_GFXOPT)Use PowerPC Graphics group optional instructions
mpowerpc-gpoptTarget Report Mask(PPC_GPOPT)Use PowerPC General Purpose group optional instructions
mpowerpc64Target Report Mask(POWERPC64)Use PowerPC-64 instruction set
mprioritize-restricted-insns=Target RejectNegative Joined UInteger Var(rs6000_sched_restricted_insns_priority)Specify scheduling priority for dispatch slot restricted insns
msched-costly-dep=Target RejectNegative Joined Determine which dependences between insns are considered costly
msched-epilogTarget Undocumented Var(TARGET_SCHED_PROLOG) VarExists
msched-prologTarget Report Var(TARGET_SCHED_PROLOG) Init(1)Schedule the start and end of the procedure
msoft-floatTarget Report RejectNegative Mask(SOFT_FLOAT)Do not use hardware floating point
mspeTarget Var(rs6000_spe)Generate SPE SIMD instructions on E500
mspe=Target RejectNegative Joined-mspe=yes/no	Deprecated option.  Use -mspe/-mno-spe instead
mstringTarget Report Mask(STRING)Generate string instructions for block moves
msum-in-tocTarget RejectNegative Var(TARGET_NO_SUM_IN_TOC,0) VarExistsPlace symbol+offset constants in TOC
msvr4-struct-returnTarget Report RejectNegative Var(aix_struct_return,0) VarExistsReturn small structures in registers (SVR4 default)
mswdivTarget Report Var(swdiv)Generate software floating point divide for better throughput
mtraceback=Target RejectNegative Joined-mtraceback=	Select full, part, or no traceback table
mtune=Target RejectNegative Joined-mtune=	Schedule code for given CPU
mupdateTarget Report RejectNegative InverseMask(NO_UPDATE, UPDATE)Generate load/store with update instructions
mvrsaveTarget Report Var(TARGET_ALTIVEC_VRSAVE)Generate VRSAVE instructions when generating AltiVec code
mvrsave=Target RejectNegative Joined-mvrsave=yes/no	Deprecated option.  Use -mvrsave/-mno-vrsave instead
mwarn-altivec-longTarget Var(rs6000_warn_altivec_long) Init(1)Warn about deprecated 'vector long ...' AltiVec type usage
mwarn-nonportable-cfstringsTarget Report Var(darwin_warn_nonportable_cfstrings) Init(1)Warn if constant CFString objects contain non-portable characters
mxl-compatTarget Report Var(TARGET_XL_COMPAT)Conform more closely to IBM XLC semantics
nostdincAda RejectNegative
nostdincC ObjC C++ ObjC++Do not search standard system include directories (those specified with -isystem will still be used)
nostdinc++C++ ObjC++Do not search standard system include directories for C++
nostdlibAda
oC ObjC C++ ObjC++ Joined Separate
oCommon Joined Separate-o <file>	Place output into <file>
pCommon Var(profile_flag) VarExistsEnable function profiling
pedanticC ObjC C++ ObjC++
pedanticCommon Var(pedantic)Issue warnings needed for strict compliance to the standard
pedantic-errorsC ObjC C++ ObjC++
pedantic-errorsCommonLike -pedantic but issue them as errors
print-objc-ivar-layoutObjC ObjC++Generate GC ivar layout information
print-objc-runtime-infoObjC ObjC++Generate C header of platform-specific features
print-pch-checksumC ObjC C++ ObjC++Print a checksum of the executable for PCH validity checking, and stop
quietCommon Var(quiet_flag)Do not display functions compiled or elapsed time
remapC ObjC C++ ObjC++Remap file names when including files
std=c++98C++ ObjC++Conform to the ISO 1998 C++ standard
std=c89C ObjCConform to the ISO 1990 C standard
std=c99C ObjCConform to the ISO 1999 C standard
std=c9xC ObjCDeprecated in favor of -std=c99
std=f2003FortranConform to the ISO Fortran 2003 standard
std=f95FortranConform to the ISO Fortran 95 standard
std=gnuFortranConform nothing in particular
std=gnu++98C++ ObjC++Conform to the ISO 1998 C++ standard with GNU extensions
std=gnu89C ObjCConform to the ISO 1990 C standard with GNU extensions
std=gnu99C ObjCConform to the ISO 1999 C standard with GNU extensions
std=gnu9xC ObjCDeprecated in favor of -std=gnu99
std=iso9899:1990C ObjCConform to the ISO 1990 C standard
std=iso9899:199409C ObjCConform to the ISO 1990 C standard as amended in 1994
std=iso9899:1999C ObjCConform to the ISO 1999 C standard
std=iso9899:199xC ObjCDeprecated in favor of -std=iso9899:1999
std=legacyFortranAccept extensions to support legacy code
traditional-cppC ObjC C++ ObjC++Enable traditional preprocessing
trigraphsC ObjC C++ ObjC++-trigraphs	Support ISO C trigraphs
undefC ObjC C++ ObjC++Do not predefine system-specific and GCC-specific macros
vC ObjC C++ ObjC++Enable verbose output
vTreelang
versionCommon Var(version_flag)Display the compiler's version
versionJava
wC ObjC C++ ObjC++
wCommon Var(inhibit_warnings)Suppress warnings
yTreelang
